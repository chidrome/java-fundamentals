/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.Arrays;
import java.util.HashSet;

public class Library {

    // generate a random number from 1 - 6 and enter it into an array n number of times
    public static int[] roll(int numberOfTimesToRoll){
        int[] rolledNumbers = new int[numberOfTimesToRoll];

        for(int i = 0; i < numberOfTimesToRoll; i++){
            rolledNumbers[i] = (int) (Math.random()*6) + 1;
        }

        return rolledNumbers;
    }

    // check to see if an array contains duplicate values
    public static boolean containsDuplicates(int[] inputArray){

        // sort the array first
        Arrays.sort(inputArray);

        // declare the previous value to check against
        int previousValue = inputArray[0];

        // loop through the array and check to see if there is a duplicate
        for(int i = 1; i < inputArray.length; i++){
            if(inputArray[i] == previousValue) {
                return true;
            }
            previousValue = inputArray[i];
        }

        return false;
    }

    // calculate the average of the array
    public static double getAverage(int[] inputArray) {
        double sum = 0.0;

        // loop through the array and add
        for (int element: inputArray) {
            sum = sum + element;
        }
        double average = sum / inputArray.length;
        return average;
    }

    // calculate the averages of each array and return the lowest
    public static double lowestAvg(int[][] inputArray){
        // specify an array with the averages
        double[] avgsArray = new double[inputArray.length];
        // index array average
        double sumOfCurrentArray = 0.0;

        // loop through the array of arrays
        for(int i = 0; i < inputArray.length; i++){
            // loop through the arrays in that index
            for(int j = 0; j < inputArray[i].length; j++){
                sumOfCurrentArray += inputArray[i][j];
            }
            avgsArray[i] = sumOfCurrentArray / inputArray[i].length;
            sumOfCurrentArray = 0.0;
        }
        Arrays.sort(avgsArray);
        double lowestAverage = avgsArray[0];
        return lowestAverage;
        
    }

    public static void analyzeWeatherData(int[][] inputArray) {
        // declare min and max values
        int minValue = inputArray[0][0];
        int maxValue = 0;

        // create a hashset
        HashSet<Integer> uniqueTemp = new HashSet<>();

        // loop through the input array and
        for(int i = 0; i < inputArray.length; i++){
            for(int j = 0; j < inputArray[i].length; j++){
                // add to the hashset if number doesn't exist
                uniqueTemp.add(inputArray[i][j]);

                // set the max value
                if(inputArray[i][j]  > maxValue){
                    maxValue = inputArray[i][j];
                }

                // set the min value
                if(inputArray[i][j] < minValue){
                    minValue = inputArray[i][j];
                }
            }
        }

        // print high and lows
        System.out.println("High: " + maxValue);
        System.out.println("Low: " + minValue);

        // loop through the min and max values and
        // check if the hashset contains that number and
        // print the number not seen
        for(int i = minValue; i < maxValue; i++){
            if (!uniqueTemp.contains(i)){
                System.out.println("Never saw temperature: " + i);
            }
        }
    }

}
